import React, { useState, useCallback, useEffect, useMemo } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate, useParams } from "react-router-dom";
import Autocomplete from "@mui/material/Autocomplete";
import { createFilterOptions } from "@material-ui/lab/Autocomplete";
import swal from "sweetalert";
import axios from "axios";
import { useDropzone } from "react-dropzone";
import TextField from "@mui/material/TextField";
import { BACKEND_URL } from "../../environment";
import {
  GetPropertyDataByIDAction,
  LegacyListShowAction,
  SalePropertyEditAction,
  SalePropertyPostAction,
} from "../../Redux/actions/LegacyAction";
import {
  PartnerOwnEventsPostAction,
  PartnerVenueEventDeleteAction,
  PartnerVenueEventGetAction,
  PartnerVenueEventUpdateAction,
} from "../../Redux/actions/PartnerAction";
import { Categoryshowlist } from "../../Redux/actions/EventsAction";
import LoaderSpinner from "../Loader/Loader-spinner";
import Stack from "@mui/material/Stack";

const Partner_venue = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [isOpenSkill, setIsOpenSkill] = useState(false);
  const [categoryid, setcategoryid] = useState("");
  const { propertyId } = useParams();
  const [selectedSkill, setSelectedSkill] = useState([]);
  const { skillsData } = useSelector((state) => state.Ctegoryreducer);

  const { GetPropertyDataByID } = useSelector(
    (state) => state.GetPropertyDataByIDReducer
  );

  useEffect(() => {
    dispatch(Categoryshowlist());
  }, []);

  useEffect(() => {
    if (propertyId) {
      dispatch(GetPropertyDataByIDAction(propertyId));
    }
  }, [propertyId]);

  //   useEffect(() => {
  //     if (GetPropertyDataByID && propertyId) {
  //       setEventImage(GetPropertyDataByID?.image);
  //       setprice(GetPropertyDataByID?.price);
  //       setdescription(GetPropertyDataByID?.description);
  //       setseller_platform(GetPropertyDataByID?.seller_platform);
  //     }
  //   }, [GetPropertyDataByID, propertyId]);

  const [files, setFiles] = useState([]);
  const [files1, setFiles1] = useState([]);
  const [eventImage, setEventImage] = useState(null);
  const [imageChanged, setImageChanged] = useState(false);

  const baseStyle = {
    flex: 1,
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    padding: "20px",
    borderWidth: 2,
    borderRadius: 2,
    borderColor: "#222a425e",
    borderStyle: "dashed",
    backgroundColor: "#fafafa",
    color: "#bdbdbd",
    outline: "none",
    transition: "border .24s ease-in-out",
  };
  const videoStyle = {
    display: "block",
    width: "100%",
    Position: "relative",
  };
  const focusedStyle = {
    borderColor: "#2196f3",
  };

  const thumbsContainer = {
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    marginTop: 16,
  };

  const thumb = {};

  const thumbInner = {
    minWidth: 0,
    overflow: "hidden",
    Position: "relative",
  };

  const img = {
    display: "block",
    width: "auto",
    height: "100%",
  };

  const {
    getRootProps: getRootfileProps,
    getInputProps: getInputfileProps,
    isDragActive,
    acceptedFiles,
    isFocused,
    isDragAccept,
    isDragReject,
  } = useDropzone({
    accept: {
      "image/jpeg": [],
      "image/png": [],
    },
    onDrop: useCallback(
      (acceptedFiles) => {
        setFiles([
          ...files,
          ...acceptedFiles?.map((file) =>
            Object.assign(file, {
              preview: URL.createObjectURL(file),
              title: file.name,
            })
          ),
        ]);
      },
      [files]
    ),
  });

  const filterOptions = createFilterOptions({
    matchFrom: "start",
    stringify: (option) => option?.name,
  });

  const { getRootProps: getRootfileProps1, getInputProps: getInputfileProps1 } =
    useDropzone({
      accept: {
        accept: "video/mp4, video/quicktime, video/avi",
      },
      onDrop: useCallback(
        (acceptedFiles) => {
          setFiles1([
            ...files1,
            ...acceptedFiles?.map((file) =>
              Object.assign(file, {
                preview: URL.createObjectURL(file),
                title: file.name,
              })
            ),
          ]);
        },
        [files1]
      ),
    });

  const style = useMemo(
    () => ({
      ...baseStyle,
      ...(isFocused ? focusedStyle : {}),
    }),
    [isFocused, isDragAccept, isDragReject]
  );
  const removeFile = (file) => () => {
    const newFiles = [...files];
    newFiles.splice(newFiles.indexOf(file), 1);
    setFiles(newFiles);
  };

  const removeFile2 = (file) => () => {
    const newFiles = [...files1];
    newFiles.splice(newFiles.indexOf(file), 1);
    setFiles1(newFiles);
  };

  const thumbs2 = files1?.map((file) => {
    const fileName = files1?.preview?.split("/").pop()?.split("?")[0];
    return (
      <div className="show_img_section" style={thumb} key={file.name}>
        <div style={thumbInner}>
          <div className="remveImageDivShow">
            <p>File Selected : {fileName}</p>
            <div className="edit_compitition_imggg">
              <video src={file?.preview} />
            </div>
            <div onClick={removeFile2(file, file.title)}>
              <span className="crossicon12">
                <i class="fa-solid fa-trash"></i>
                {/* <i className="fa fa-trash-o"></i> */}
              </span>
            </div>
          </div>
        </div>
      </div>
    );
  });

  const thumbs = files?.map((file) => {
    const fileName = file?.preview?.split("/").pop()?.split("?")[0];
    return (
      <div className="show_img_section" style={thumb} key={file.name}>
        <div style={thumbInner}>
          <div className="remveImageDivShow">
            File Selected : <p>{fileName}</p>
            <div className="edit_compitition_imggg">
              <img src={file?.preview} />
            </div>
            <div onClick={removeFile(file)}>
              <span className="crossicon12">
                <i class="fa-solid fa-trash"></i>
                {/* <i className="fa fa-trash-o"></i> */}
              </span>
            </div>
          </div>
        </div>
      </div>
    );
  });

  const { success: successdelete } = useSelector(
    (state) => state.PartnerVenueEventDeleteReducer
  );

  const { success, error, message, loading } = useSelector(
    (state) => state.PartnerOwnEventsPostReducer
  );

  const { userData } = useSelector((state) => state.authReducer);

  useEffect(() => {
    dispatch(LegacyListShowAction(userData?.user?.user_id));
  }, []);

  const [rerender, setRerender] = useState(false);

  const [title, settitle] = useState("");
  const [description, setdescription] = useState("");

  const handleSubmit = () => {
    const formData = new FormData();
    formData.append("title", title);
    formData.append("description", description);
    formData.append("category", categoryid);

    formData.append("user", [userData?.user?.user_id]);

    if (files?.length > 0) {
      for (const key of Object.keys(files)) {
        formData.append("image", files[key]);
      }
    }

    if (files1?.length > 0) {
      for (const key of Object.keys(files1)) {
        formData.append("video", files1[key]);
      }
    }

    dispatch(PartnerOwnEventsPostAction(formData));
    setRerender(true);
  };

  useEffect(() => {
    if (success && rerender) {
      swal({
        title: " ",
        text: message,
        className: "successAlert",
        icon: "/img/Memorial Information Logo.png",
        buttons: false,
        timer: 5000,
      });

      setTimeout(() => {
        setLoading(false);
      }, 1000);
      setLoading(true);
      setRerender(false);
      setEventImage("");
      settitle("");
      setdescription("");
    }
    if (error && rerender) {
      swal({
        title: "Error",
        text: error,
        className: "errorAlert",
        icon: "/img/Memorial Information Logo.png",
        buttons: false,
        timer: 2000,
      }).then(() => {
        window.location.reload();
      });
      setRerender(false);
    }
  }, [success, error, rerender]);

  const [loadingloader, setLoading] = useState(true);
  useEffect(() => {
    setTimeout(() => {
      setLoading(false);
    }, 2000);
  }, []);

  useEffect(() => {
    dispatch(PartnerVenueEventGetAction());
  }, [successdelete, success]);

  const { PartnerVenueEventGet } = useSelector(
    (state) => state.PartnerVenueEventGetReducer
  );

  const [totalLenght, setTotalLenght] = useState();

  useEffect(() => {
    if (PartnerVenueEventGet) {
      setTotalLenght(Object.keys(PartnerVenueEventGet)?.length);
    }
  }, [PartnerVenueEventGet]);

  const DeleteLegacyModelOnebyOne = (id) => {
    swal({
      title: "Warning",
      text: "Are you sure you want to delete this venue?",
      className: "errorAlert",
      icon: "/img/Memorial icon.png",
      buttons: true,
      dangerMode: true,
    }).then((willDelete) => {
      if (willDelete) {
        dispatch(
          PartnerVenueEventDeleteAction(PartnerVenueEventGet?.[0]?.user)
        );
        swal({
          title: "",
          text: "Successfully Deleted!",
          className: "successAlert",
          icon: "/img/Memorial icon.png",
          buttons: false,
          timer: 1500,
        });
      }
    });
  };

  // const addNewSkill = async (value) => {
  //   setLoading(true);
  //   try {
  //     await axios.post(`${BACKEND_URL}partner/category/`, { name: value });
  //     // After adding the skill, fetch the updated skills data using your action
  //     dispatch(Categoryshowlist());
  //     setNewSkill(""); // Clear the input field
  //   } catch (error) {
  //   }
  //   setLoading(false);
  // };

  const [newSkill, setNewSkill] = useState([]);

  function addNewSkill(e) {
    if (e.keyCode === 8) return;
    if (!e.target?.value) return;
    if (e.key === "Tab") return;
    setIsOpenSkill(true);
    if (e.key !== "Enter") return;

    const value = e.target.value;
    if (!value.trim()) return;

    // Check if the skill already exists in newSkill
    const isSkillAlreadyExists = skillsData.some(
      (skill) => skill.name.toLowerCase() === value.toLowerCase().trim()
    );

    if (isSkillAlreadyExists) {
      // Handle the case where the skill already exists
      swal({
        title: "Notice",
        text: "Tag already exists",
        className: "errorAlert-login",
        icon: "/img/logonew-red.svg",
        buttons: false,
        timer: 5000,
      });
      e.target.value = "";
      return;
    }

    // Check if the skill already exists in skillsData
    const isSkillInDatabase = skillsData.some(
      (skill) => skill.name.toLowerCase() === value.toLowerCase().trim()
    );

    if (isSkillInDatabase) {
      e.target.value = "";
      return;
    }

    // Perform the API call to add the skill
    const config = {
      headers: {
        "Content-Type": "multipart/form-data",
        Authorization: `Bearer ${userData.token}`,
      },
    };

    axios
      .post(`${BACKEND_URL}partner/category/`, {
        name: value,
      })
      .then((res) => {
        // Extract the ID from the response and update newSkill
        const addedSkill = { id: res.data.id, name: value };
        setNewSkill([...newSkill, addedSkill]);

        // Dispatch your action, e.g., Categoryshowlist
        dispatch(Categoryshowlist());
      });

    e.target.value = "";
  }

  const handleInputChangeAutocomplete = (event, newInputValue) => {
    setIsOpenSkill(false);
    setNewSkill(newInputValue);
    setIsOpenSkill(newInputValue?.length > 0);
  };

  const handleKeyDownSkills = (e) => {
    if (e.key === "Enter" && newSkill?.trim()) {
      addNewSkill(newSkill);
    }
  };

  const handleChange = (event, newValue) => {
    setSelectedSkill(newValue);
    setIsOpenSkill(false);
    if (newValue) {
      setcategoryid(newValue.id);
    }
  };

  return (
    <div>
      {loadingloader ? (
        <LoaderSpinner />
      ) : (
        <div class="pl-6">
          <div className="main-page-div bg-green-200">
            <h1 className="heading-top">Venue Add</h1>

            <div className="common-divbg bg-white">
              <div>
                <h1>Categorie</h1>

                {/* <Autocomplete
                  multiple
                  value={selectedSkill}
                  open={isOpenSkill}
                  onInputChange={handleInputChangeAutocomplete}
                  options={skillsData || []} // Ensure op
                  getOptionLabel={(option) => option?.name}
                  onChange={handleChange}
                  inputProps={{
                    "aria-label": "Without label",
                  }}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      fullWidth
                      placeholder="Type something"
                      value={newSkill}
                      onKeyDown={handleKeyDownSkills}
                    />
                  )}
                /> */}

                {JSON.stringify(skillsData)}
                <Autocomplete
                  value={selectedSkill}
                  multiple
                  id="tags-outlined"
                  open={isOpenSkill}
                  onInputChange={handleInputChangeAutocomplete}
                  filterOptions={filterOptions}
                  options={skillsData ?? []}
                  getOptionLabel={(option) => option?.name}
                  onChange={(e, v) => {
                    handleChange(e, v);
                  }}
                  inputProps={{
                    "aria-label": "Without label",
                  }}
                  filterSelectedOptions
                  noOptionsText={"Press enter to add this Tag and select again"}
                  hiddenLabel="true"
                  // open={false}
                  onKeyDown={handleKeyDownSkills}
                  autoHighlight={true}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      fullWidth
                      placeholder="Type something"
                    />
                  )}
                  isOptionEqualToValue={(option, value) =>
                    value === undefined ||
                    value === "" ||
                    option?.id === value?.id
                  }
                />
              </div>
              {totalLenght == 0 ? (
                <>
                  <div className="events-div my-12 ">
                    <div className="">
                      <label class="heading-title">Image</label>
                      <div className="container-upload">
                        <div
                          className="borderOfUploadFilenew"
                          {...getRootfileProps({ style })}
                        >
                          <input
                            {...getInputfileProps()}
                            imgExtension={[".gif", ".mp4"]}
                            // maxfilesize={5242880}
                          />
                          <span className="uploadFilenewArea">
                            <img
                              className="upiconimg"
                              src="/img/uploadimg.png"
                              alt=""
                            />
                            Image
                          </span>
                        </div>
                      </div>

                      <aside style={thumbsContainer}>{thumbs}</aside>
                      <label class="heading-title">Video</label>
                      <div className="container-upload">
                        <div
                          className="borderOfUploadFilenew"
                          {...getRootfileProps1({ style })}
                        >
                          <input
                            {...getInputfileProps1()}
                            imgExtension={[".gif", ".mp4"]}
                            // maxfilesize={5242880}
                          />
                          <span className="uploadFilenewArea">
                            <img
                              className="upiconimg"
                              src="/img/uploadimg.png"
                              alt=""
                            />
                            video
                          </span>
                        </div>
                      </div>
                    </div>
                    <aside style={thumbsContainer}>{thumbs2}</aside>

                    <div className="input-boxdiv mb-4">
                      <label className="heading-title">Title</label>
                      <input
                        value={title}
                        onChange={(e) => settitle(e.target.value)}
                        type="text"
                        placeholder="Add Title"
                        class="w-full px-4 py-3 rounded-lg   mt-2 border focus:outline-none"
                      />
                    </div>

                    <div className="input-boxdivtextarea mb-4">
                      <label className="heading-title">Description</label>

                      <textarea
                        value={description}
                        onChange={(e) => setdescription(e.target.value)}
                        type="text"
                        placeholder="Add Description"
                        className="w-full px-4 py-3 rounded-lg mt-2 border focus:outline-none"
                      ></textarea>
                    </div>

                    <div className="input-add">
                      <div className="flex gap-4 mt-12">
                        <button
                          onClick={handleSubmit}
                          type="button"
                          class="py-3 px-5 mr-2 mb-2 w-full text-sm font-medium text-gray-900 bg-[#c99e59] rounded-lg border border-gray-200  "
                        >
                          Save
                        </button>
                        <button
                          type="button"
                          class="w-full py-3 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 bg-white rounded-lg border border-[#c99e59]  "
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className="">
                    <div className="card-legacydetailsshow">
                      <div className="details-pageleg">
                        <div className="lastupdated-date flex items-center gap-2">
                          <h6 className="team-name legacy-det">Venu List</h6>
                          <div class="flex gap-2">
                            <Link
                              to={`/edit/partner/venue/${PartnerVenueEventGet?.[0]?.user}`}
                            >
                              <button class="flex p-2.5 bg-yellow-500 rounded-xl hover:rounded-3xl hover:bg-yellow-600 transition-all duration-300 text-white">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  class="h-6 w-6"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke="currentColor"
                                  stroke-width="2"
                                >
                                  <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                                  />
                                </svg>
                              </button>
                            </Link>

                            <button class="flex p-2.5 bg-red-500 rounded-xl hover:rounded-3xl hover:bg-red-600 transition-all duration-300 text-white">
                              <svg
                                onClick={DeleteLegacyModelOnebyOne}
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke-width="1.5"
                                stroke="currentColor"
                                class="w-6 h-6"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        <div className="gallery-imageshowgrid">
                          {PartnerVenueEventGet?.[0]?.image ? (
                            <img
                              className="imagegalleryshow venuimage max-w-full rounded-lg"
                              src={PartnerVenueEventGet?.[0].image}
                              alt=""
                            />
                          ) : (
                            <p>No image available</p>
                          )}
                        </div>

                        <div>
                          <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words	">
                              Title
                            </h1>
                            <p class="decisions-contnet capitalize break-words	">
                              {PartnerVenueEventGet?.[0]?.title ?? "N/A"}
                            </p>
                          </div>
                          <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words">
                              Description
                            </h1>
                            <p class="decisions-contnet capitalize break-words white-space: break-spaces">
                              {PartnerVenueEventGet?.[0]?.description ?? "N/A"}
                            </p>
                          </div>
                          <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words">
                              Venue Facility
                            </h1>
                            <p className="decisions-contnet capitalize break-words">
                              {PartnerVenueEventGet?.[0]?.venue_facility
                                ? PartnerVenueEventGet[0].venue_facility
                                    .split(",") // Split the text by commas
                                    .map((facility, index) => (
                                      <span key={index}>
                                        {facility}
                                        <br />{" "}
                                      </span>
                                    ))
                                : "N/A"}
                            </p>
                          </div>
                          <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words">
                              Why Provide
                            </h1>
                            <p class="decisions-contnet capitalize break-words">
                              {PartnerVenueEventGet?.[0]?.why_provide
                                ? PartnerVenueEventGet[0].why_provide
                                    .split(",") // Split the text by commas
                                    .map((facility, index) => (
                                      <span key={index}>
                                        {facility}
                                        <br />{" "}
                                      </span>
                                    ))
                                : "N/A"}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Partner_venue;
