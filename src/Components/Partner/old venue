import React, { useState, useCallback, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate, useParams } from "react-router-dom";

import swal from "sweetalert";

import { useDropzone } from "react-dropzone";
import {
  GetPropertyDataByIDAction,
  LegacyListShowAction,
  SalePropertyEditAction,
  SalePropertyPostAction,
} from "../../Redux/actions/LegacyAction";
import {
  PartnerOwnEventsPostAction,
  PartnerVenueEventDeleteAction,
  PartnerVenueEventGetAction,
  PartnerVenueEventUpdateAction,
} from "../../Redux/actions/PartnerAction";
import LoaderSpinner from "../Loader/Loader-spinner";

const Partner_venue = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { propertyId } = useParams();

  const { GetPropertyDataByID } = useSelector(
    (state) => state.GetPropertyDataByIDReducer
  );

  useEffect(() => {
    if (propertyId) {
      dispatch(GetPropertyDataByIDAction(propertyId));
    }
  }, [propertyId]);

  //   useEffect(() => {
  //     if (GetPropertyDataByID && propertyId) {
  //       setEventImage(GetPropertyDataByID?.image);
  //       setprice(GetPropertyDataByID?.price);
  //       setdescription(GetPropertyDataByID?.description);
  //       setseller_platform(GetPropertyDataByID?.seller_platform);
  //     }
  //   }, [GetPropertyDataByID, propertyId]);

  const [eventImage, setEventImage] = useState(null);
  const [imageChanged, setImageChanged] = useState(false);

  const { getRootProps, getInputProps } = useDropzone({
    accept: "image/*",
    onDrop: useCallback(
      (acceptedFiles) => {
        setEventImage(
          acceptedFiles.map((file) =>
            Object.assign(file, {
              preview: URL.createObjectURL(file),
              title: file?.name,
            })
          )
        );
        setImageChanged(true);
      },
      [eventImage]
    ),
  });

  const { success: successdelete } = useSelector(
    (state) => state.PartnerVenueEventDeleteReducer
  );

  const { success, error, message, loading } = useSelector(
    (state) => state.PartnerOwnEventsPostReducer
  );

  const { success: successUpdate, error: errorUpdate } = useSelector(
    (state) => state.SalePropertyEditReducer
  );
  const { userData } = useSelector((state) => state.authReducer);

  useEffect(() => {
    dispatch(LegacyListShowAction(userData?.user?.user_id));
  }, []);

  const [rerender, setRerender] = useState(false);

  const [VenueFacility, setVenueFacility] = useState([
    {
      venue_facility: "",
    },
  ]);

  const handleChangeVenueFacility = (e, index) => {
    const { name, value } = e.target;
    const list = [...VenueFacility];
    list[index][name] = value;
    setVenueFacility(list);
  };

  const handleRemoveClickVenueFacility = (index) => {
    const list = [...VenueFacility];
    const remove = list.filter((_, indexFilter) => !(indexFilter === index));
    setVenueFacility(remove);
  };

  const handleAddClickVenueFacility = () => {
    setVenueFacility([
      ...VenueFacility,
      {
        venue_facility: "",
      },
    ]);
  };

  const [whyProvide, setwhyProvide] = useState([
    {
      why_provide: "",
    },
  ]);

  const handleChangewhyProvide = (e, index) => {
    const { name, value } = e.target;
    const list = [...whyProvide];
    list[index][name] = value;
    setwhyProvide(list);
  };

  const handleRemoveClickwhyProvide = (index) => {
    const list = [...whyProvide];
    const remove = list.filter((_, indexFilter) => !(indexFilter === index));
    setwhyProvide(remove);
  };

  const handleAddClickwhyProvide = () => {
    setwhyProvide([
      ...whyProvide,
      {
        why_provide: "",
      },
    ]);
  };

  const [title, settitle] = useState("");
  const [description, setdescription] = useState("");
  const [Tutorials, setTutorials] = useState("");
  const [Explanations, setExplanations] = useState("");

  const handleSubmit = () => {
    const formData = new FormData();
    // formData.append("title", title);
    // formData.append("description", description);

    formData.append("explanations", Explanations);
    formData.append("tutorials", Tutorials);

    // VenueFacility.forEach((item, index) => {
    //   if (item.venue_facility) {
    //     formData.append(`venue_facility[${index}]`, item.venue_facility);
    //   }
    // });

    // whyProvide.forEach((item, index) => {
    //   if (item.why_provide) {
    //     formData.append(`why_provide[${index}]`, item.why_provide);
    //   }
    // });

    formData.append("user", [userData?.user?.user_id]);

    // if (imageChanged) {
    //   formData.append("image", eventImage?.[0]);
    // }

    dispatch(PartnerOwnEventsPostAction(formData));
    setRerender(true);
  };

  useEffect(() => {
    if (success && rerender) {
      swal({
        title: " ",
        text: message,
        className: "successAlert",
        icon: "/img/Memorial Information Logo.png",
        buttons: false,
        timer: 5000,
      });

      setTimeout(() => {
        setLoading(false);
      }, 1000);
      setLoading(true);
      setRerender(false);
      // setVenueFacility("");
      // setwhyProvide("");
      // setEventImage("");
      // settitle("");
      // setdescription("");
    }
    if (error && rerender) {
      swal({
        title: "Error",
        text: error,
        className: "errorAlert",
        icon: "/img/Memorial Information Logo.png",
        buttons: false,
        timer: 2000,
      }).then(() => {
        window.location.reload();
      });
      setRerender(false);
    }
  }, [success, error, rerender]);

  const [renderUpdate, setRenderUpdate] = useState(false);
  const [loadingloader, setLoading] = useState(true);
  useEffect(() => {
    setTimeout(() => {
      setLoading(false);
    }, 2000);
  }, []);

  useEffect(() => {
    dispatch(PartnerVenueEventGetAction());
  }, [successdelete, success]);

  const { PartnerVenueEventGet } = useSelector(
    (state) => state.PartnerVenueEventGetReducer
  );

  const [totalLenght, setTotalLenght] = useState();

  useEffect(() => {
    if (PartnerVenueEventGet) {
      setTotalLenght(Object.keys(PartnerVenueEventGet).length);
    }
  }, [PartnerVenueEventGet]);

  const DeleteLegacyModelOnebyOne = (id) => {
    swal({
      title: "Warning",
      text: "Are you sure you want to delete this venue?",
      className: "errorAlert",
      icon: "/img/Memorial icon.png",
      buttons: true,
      dangerMode: true,
    }).then((willDelete) => {
      if (willDelete) {
        dispatch(
          PartnerVenueEventDeleteAction(PartnerVenueEventGet?.[0]?.user)
        );
        swal({
          title: "",
          text: "Successfully Deleted!",
          className: "successAlert",
          icon: "/img/Memorial icon.png",
          buttons: false,
          timer: 1500,
        });
      }
    });
  };


  return (
    <div>
      {loadingloader ? (
        <LoaderSpinner />
      ) : (
        <div class="">
          <div className="main-page-div bg-green-200">
            <h1 className="heading-top">Venue Add</h1>
            <div className="common-divbg bg-white">
              {totalLenght == 0 ? (
                <>
                  <div className="events-div my-12 ">
                    {/* <div className="">
                      <label class="heading-title">Image</label>
                      <div {...getRootProps()}>
                        <input {...getInputProps()} />
                        {eventImage ? (
                          <img
                            src={
                              eventImage?.[0]?.preview
                                ? eventImage?.[0]?.preview
                                : eventImage
                            }
                            alt=""
                            className="rounded-md object-cover"
                          />
                        ) : (
                          <img
                            className="rounded-md object-cover"
                            src="/img/demonoimage.png"
                          />
                        )}
                      </div>
                    </div> */}

                    <div className="input-boxdiv mb-4">
                      <label className="heading-title">Tutorials</label>
                      <input
                        value={Tutorials}
                        onChange={(e) => setTutorials(e.target.value)}
                        type="text"
                        placeholder="Add Tutorials"
                        class="w-full px-4 py-3 rounded-lg   mt-2 border focus:outline-none"
                      />
                    </div>

                    <div className="input-boxdivtextarea mb-4">
                      <label className="heading-title">Explanations</label>

                      <textarea
                        value={Explanations}
                        onChange={(e) => setExplanations(e.target.value)}
                        type="text"
                        placeholder="Add Explanations"
                        className="w-full px-4 py-3 rounded-lg mt-2 border focus:outline-none"
                      ></textarea>
                    </div>

                    {/* {VenueFacility?.map((item, i) => {
                      return (
                        <div>
                          <div className="input-boxdivtextarea mb-4">
                            <label className="heading-title">
                              Venue Facility
                            </label>

                            <input
                              value={item?.venue_facility}
                              name="venue_facility"
                              onChange={(e) => handleChangeVenueFacility(e, i)}
                              type="text"
                              placeholder="Add Facility"
                              class="w-full px-4 py-3 rounded-lg   mt-2 border focus:outline-none"
                            />
                          </div>

                          <div className="btn-box">
                            {VenueFacility?.length - 1 === i && (
                              <button
                                className="add-legacybtn"
                                onClick={handleAddClickVenueFacility}
                              >
                                Add
                              </button>
                            )}

                            {VenueFacility?.length !== 1 && (
                              <button
                                className="remove-legacybtn"
                                onClick={() =>
                                  handleRemoveClickVenueFacility(i)
                                }
                              >
                                Remove
                              </button>
                            )}
                          </div>
                        </div>
                      );
                    })}

                    {whyProvide?.map((item, i) => {
                      return (
                        <div>
                          <div className="input-boxdivtextarea mb-4">
                            <label className="heading-title">Why Provide</label>

                            <input
                              value={item?.why_provide}
                              name="why_provide"
                              onChange={(e) => handleChangewhyProvide(e, i)}
                              type="text"
                              placeholder="Add Why Provide"
                              class="w-full px-4 py-3 rounded-lg   mt-2 border focus:outline-none"
                            />
                          </div>

                          <div className="btn-box">
                            {whyProvide?.length - 1 === i && (
                              <button
                                className="add-legacybtn"
                                onClick={handleAddClickwhyProvide}
                              >
                                Add
                              </button>
                            )}

                            {whyProvide?.length !== 1 && (
                              <button
                                className="remove-legacybtn"
                                onClick={() => handleRemoveClickwhyProvide(i)}
                              >
                                Remove
                              </button>
                            )}
                          </div>
                        </div>
                      );
                    })} */}

                    <div className="input-add">
                      <div className="flex gap-4 mt-12">
                        <button
                          onClick={handleSubmit}
                          type="button"
                          class="py-3 px-5 mr-2 mb-2 w-full text-sm font-medium text-gray-900 bg-[#c99e59] rounded-lg border border-gray-200  "
                        >
                          Save
                        </button>
                        <button
                          type="button"
                          class="w-full py-3 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 bg-white rounded-lg border border-[#c99e59]  "
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className="">
                    <div className="card-legacydetailsshow">
                      <div className="details-pageleg">
                        <div className="lastupdated-date flex items-center gap-2">
                          <h6 className="team-name legacy-det">Venu List</h6>
                          <div class="flex gap-2">
                            <Link
                              to={`/edit/partner/venue/${PartnerVenueEventGet?.[0]?.user}`}
                            >
                              <button class="flex p-2.5 bg-yellow-500 rounded-xl hover:rounded-3xl hover:bg-yellow-600 transition-all duration-300 text-white">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  class="h-6 w-6"
                                  fill="none"
                                  viewBox="0 0 24 24"
                                  stroke="currentColor"
                                  stroke-width="2"
                                >
                                  <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                                  />
                                </svg>
                              </button>
                            </Link>

                            <button class="flex p-2.5 bg-red-500 rounded-xl hover:rounded-3xl hover:bg-red-600 transition-all duration-300 text-white">
                              <svg
                                onClick={DeleteLegacyModelOnebyOne}
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke-width="1.5"
                                stroke="currentColor"
                                class="w-6 h-6"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>

                        {/* <div className="gallery-imageshowgrid">
                          {PartnerVenueEventGet?.[0]?.image ? (
                            <img
                              className="imagegalleryshow venuimage max-w-full rounded-lg"
                              src={PartnerVenueEventGet?.[0].image}
                              alt=""
                            />
                          ) : (
                            <p>No image available</p>
                          )}
                        </div> */}

                        <div>
                          <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words	">
                              Tutorials
                            </h1>
                            <p class="decisions-contnet capitalize break-words	">
                              {PartnerVenueEventGet?.[0]?.tutorials ?? "N/A"}
                            </p>
                          </div>
                          <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words">
                              Eplanations
                            </h1>
                            <p class="decisions-contnet capitalize break-words white-space: break-spaces">
                              {PartnerVenueEventGet?.[0]?.explanations ?? "N/A"}
                            </p>
                          </div>
                          {/* <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words">
                              Venue Facility
                            </h1>
                            <p className="decisions-contnet capitalize break-words">
                              {PartnerVenueEventGet?.[0]?.venue_facility
                                ? PartnerVenueEventGet[0].venue_facility
                                    .split(",") // Split the text by commas
                                    .map((facility, index) => (
                                      <span key={index}>
                                        {facility}
                                        <br />{" "}
                                      </span>
                                    ))
                                : "N/A"}
                            </p>
                          </div>
                          <div class="my-6">
                            <h1 class="plan-ahed capitalize break-words">
                              Why Provide
                            </h1>
                            <p class="decisions-contnet capitalize break-words">
                              {PartnerVenueEventGet?.[0]?.why_provide
                                ? PartnerVenueEventGet[0].why_provide
                                    .split(",") // Split the text by commas
                                    .map((facility, index) => (
                                      <span key={index}>
                                        {facility}
                                        <br />{" "}
                                      </span>
                                    ))
                                : "N/A"}
                            </p>
                          </div> */}
                        </div>
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Partner_venue;
